options {
  IGNORE_CASE = true; //para no hacer distincion entre mayusculas y minusculas.
  STATIC = false; //para que los metodos que genere la compilacion no sean estaticos.
}
PARSER_BEGIN(compilador)

package comp;
public class compilador {
	
}


PARSER_END(compilador)

//Definicion de tokens 
//PALABRAS RESERVADAS
TOKEN: 
{ 
 <PR_PCK : "package"> 
 | <PR_SYS : "System">
 | <PR_OUT : "out">
 | <PR_PRT : "print">
 | <PR_PRTL : "println">
 | <PR_IMP : "import">
 | <PR_CLS : "class">
 | <PR_PUB : "public">
 | <PR_STC : "static">
 | <PR_VOID : "void">
 | <PR_MAIN : "main">
 | <PR_RTN : "return">
 | <PR_NULL : "null">
 | <PR_NEW : "new">
 | <PR_EXT : "extense">
 | <PR_THR : "throw">
 | <PR_BREAKE : "breake">
 | <PR_CON : "continue">
 | <PR_SUPER : "super">
 | <PR_THIS : "this">
 | <PR_ABS : "abstract">
 | <PR_INT : "interface">
 | <PR_SYN : "synchronized">
 | <PR_DFT : "default">
}

//CICLOS
TOKEN: 
{
<CICL_DO : "do">
| <CICL_WHI : "while">
| <CICL_FOR : "for">
}


//CONDICIONES
TOKEN: 
{
<CONDI_ELSE : "else">
| <CONDI_IF : "if">
| <CONDI_SWT : "switch">
| <CONDI_IFELS : "ifelse">
| <CONDI_CASE : "case">
}



//TIPOS DE ACCESO 
TOKEN: 
{
<TIPACESS_PRO : "protected">
}


//TIPOS DE DATOS 
TOKEN: 
{
<TIPDAT_INT : "int">
| <TIPDAT_DOU : "double">
| <TIPDAT_FLO : "float">
| <TIPDAT_CHAR : "char">
| <TIPDAT_LONG : "long">
| <TIPDAT_BYTE : "byte">
| <TIPDAT_BOOLE : "boolean">
| <TIPDAT_STR : "String">
| <TIPDAT_SHR : "short">
}


//BOOLEANOS
TOKEN: 
{
<BOOLE_TRUE : "true">
| <BOOLE_FALSE : "false">
}

//ERRORES
TOKEN: 
{
<ERROR_TRY : "try">
| <ERROR_CATCH : "catch">
}

//OPERADORES LOGICOS  
TOKEN: 
{
<OPE_MAYOR : ">">
| <OPE_MENOR : "<">
| <OPE_MAYORIGUAL : ">=">
| <OPE_MENORIGUAL : "<=">
| <OPE_DIFERENTE : "!=">
| <OPE_DOBLEIGUAL : "==">
| <OPE_AND : "&&">
| <OPE_OR : "||">
}


//OPERADORES ARITMETICOS 
TOKEN: 
{
<OPEARI_SUMA : "+">
| <OPEARI_RESTA : "-">
| <OPEARI_DIV : "/">
| <OPEARI_MODULAR : "%">
| <OPEARI_MULTI : "*">
| <OPEARI_INCREMENTO : "++">
| <OPEARI_DECREMENTO : "--">
| <OPEARI_POTENCIA : "^">
}


//OTROS
TOKEN: 
{
<OTROS_ASIG : "=">
| <OTROS_LLAVEINI : "{">
| <OTROS_LLAVEFIN : "}">
| <OTROS_CORCHABRIR : "[">
| <OTROS_CORCHCIERRE : "]">
| <OTROS_PARENABRIR : "(">
| <OTROS_PARENCIERRE : ")">
| <OTROS_COMSIMPLE : "\'">
| <OTROS_COMDOB : "\"">
| <OTROS_PUNCOMA : ";">
| <OTROS_DOSPUN : ":">
| <OTROS_COMA : ",">
}

TOKEN:
{
<PrintInt : "PrintInt">
| <PrintString : "PrintString">
| <PrintBoolean : "PrintBoolean">
| <PrintChar : "PrintChar">
| <PrintFloat : "PrintFloat">
}

//EXPRESIONES REGULARES
TOKEN: 
{
<NUMERO : (["0"-"9"])+>  
	| <IDENTIFICADOR : ["a"-"z","A"-"Z"](["a"-"z","A"-"Z","0"-"9","_"])*>  
	| <NUMBER : (["0"-"9"])+["."](["0"-"9"])+ > 
	| <CHARAC : "'"["a"-"z","A"-"Z","0"-"9"]"'" >
}

//IGNORA ESPACIOS, SALTOS DE LINEA, TABULADORES
SKIP : 
{ 
	" "|"\n" | "\r" | "\r\n" | "\t"
}

//VOID PARA QUE NO RETORNE 
void Principal():
{}
{
  <PR_PUB><PR_CLS><IDENTIFICADOR><OTROS_LLAVEINI>Body()<OTROS_LLAVEFIN><OTROS_DOSPUN><EOF> //EOF INDICA EL FINAL DE TODO
}

void Body():
{}
{
  LOOKAHEAD(2)Estructura() | VariablesGlobales() //LOOKAHEAD ES PARA QUE ELIJA UNA OPCION U OTRA
}
         
void Estructura():
{}
{
  <PR_PUB><PR_STC><PR_VOID><PR_MAIN><OTROS_LLAVEINI>Sentencias()<OTROS_LLAVEFIN>
}

void VariablesGlobales():
{}
{
  <PR_PUB>(DeclaraEnteros()| DeclaraFlotantes() | DeclaraCadenas())Body()
}

void DeclaraEnteros():
{}
{
  (<TIPDAT_INT>|<TIPDAT_LONG>|<TIPDAT_BYTE>)<IDENTIFICADOR><OTROS_ASIG><NUMERO>(<OTROS_COMA><IDENTIFICADOR><OTROS_ASIG><NUMERO>)*<OTROS_DOSPUN>
} 

void DeclaraFlotantes():
{}
{
  (<TIPDAT_FLO>|<TIPDAT_BOOLE>)<IDENTIFICADOR><OTROS_ASIG><NUMBER>(<OTROS_COMA><IDENTIFICADOR><OTROS_ASIG><NUMBER>)*<OTROS_DOSPUN>
}

void DeclaraCadenas():
{}
{
  <TIPDAT_STR><IDENTIFICADOR><OTROS_ASIG><OTROS_COMDOB><IDENTIFICADOR><OTROS_COMDOB>(<OTROS_COMA><IDENTIFICADOR><OTROS_ASIG><OTROS_COMDOB><IDENTIFICADOR><OTROS_COMDOB>)*<OTROS_DOSPUN>
}
	
void EstructuraMetodo():
{}
{
 <PR_PUB><IDENTIFICADOR><OTROS_PARENABRIR><OTROS_PARENCIERRE><OTROS_LLAVEINI>LocalVariables()<OTROS_LLAVEFIN>
}

void LocalVariables():
{}
{
 (<TIPDAT_STR>|<TIPDAT_CHAR>|<TIPDAT_INT>|<TIPDAT_DOU>|<TIPDAT_FLO>|<TIPDAT_LONG><TIPDAT_BYTE>|<TIPDAT_BOOLE>)<IDENTIFICADOR><OTROS_DOSPUN>
}

void Sentencias():
{}
{
  (SentenciaIf() | Imprimir() | Ciclo_While() | Ciclo_For() | EstructuraMetodo() | ExpresionesAritmeticas() | ImprimirValores())* 
}

void SentenciaIf():
{}
{
  <CONDI_IF><OTROS_PARENABRIR>AceptaBooleanos()<OTROS_PARENCIERRE><OTROS_LLAVEINI>Sentencias()<OTROS_LLAVEFIN>(Sino())*
}

void AceptaBooleanos():
{}
{
	(<IDENTIFICADOR>|<NUMERO>)(<OPE_MENOR>|<OPE_MAYOR>|<OPE_DOBLEIGUAL>|<OPE_MENORIGUAL>|<OPE_MAYORIGUAL>|<OPE_DIFERENTE>|<OPE_AND>|<OPE_OR>)(<IDENTIFICADOR>|<NUMERO>|<NUMBER>)((<OPE_AND>|<OPE_OR>)((<IDENTIFICADOR>|<NUMERO>)(<OPE_MENOR>|<OPE_MAYOR>|<OPE_DOBLEIGUAL>|<OPE_MENORIGUAL>|<OPE_MAYORIGUAL>|<OPE_DIFERENTE>|<OPE_AND>|<OPE_OR>)(<IDENTIFICADOR>|<NUMERO>)))*
}


void Sino():
{}
{
  <CONDI_ELSE><OTROS_PARENABRIR><OTROS_PARENCIERRE><OTROS_LLAVEINI><OTROS_LLAVEFIN>
}
		
void Ciclo_While():
{}
{
  <CICL_WHI><OTROS_PARENABRIR>AceptaBooleanos()<OTROS_PARENCIERRE><OTROS_LLAVEINI>Sentencias()<OTROS_LLAVEFIN>
}		
	
void Ciclo_For():
{}
{
  <CICL_FOR><OTROS_PARENABRIR>((<TIPDAT_INT>)?<IDENTIFICADOR><OTROS_ASIG><NUMERO><OTROS_DOSPUN>AceptaBooleanos()<OTROS_DOSPUN>(<IDENTIFICADOR>(<OPEARI_DECREMENTO>|<OPEARI_INCREMENTO>))?)
<OTROS_PARENCIERRE><OTROS_LLAVEINI>Sentencias()<OTROS_LLAVEFIN>
}

void Imprimir():
{}
{
  <PR_SYS><PR_OUT>(<PR_PRT>|<PR_PRTL>)<OTROS_PARENABRIR>ImprimirNumeroTexto()<OTROS_PARENCIERRE><OTROS_DOSPUN>
}
void ExpresionesAritmeticas():
{}
{
  <OTROS_PARENABRIR>ValidaExpresionesAritmeticas()<OTROS_PARENCIERRE>
}

void ValidaExpresionesAritmeticas():
{}
{
  (<OPEARI_SUMA>|<OPEARI_RESTA>)?(<NUMERO>(<OPEARI_SUMA>|<OPEARI_RESTA>|<OPEARI_DIV>|<OPEARI_MULTI>|<OPEARI_MODULAR>)?)*
}

void ImprimirNumeroTexto():
{}
{
	(<OTROS_COMDOB>(<IDENTIFICADOR>|<NUMERO>)<OTROS_COMDOB>
	| <NUMERO>)+ 
}

void ImprimirValores():
{}
{
   (<PrintInt>|<PrintFloat>|<PrintChar>|<PrintBoolean>|<PrintString>)<IDENTIFICADOR><OTROS_DOSPUN>
}





